{"paragraphs":[{"text":"%md\n# MLlib: Decision Trees","user":"klinnoinen","dateUpdated":"2018-02-19T14:00:32+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518702069996_-2026375320","id":"20180215-134109_1203444617","dateCreated":"2018-02-15T13:41:09+0000","dateStarted":"2018-02-19T14:00:32+0000","dateFinished":"2018-02-19T14:00:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:15983","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>MLlib: Decision Trees</h1>\n</div>"}]}},{"text":"%md\n#### Create rdds","user":"klinnoinen","dateUpdated":"2018-02-19T14:00:32+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518702222574_476983270","id":"20180215-134342_64564809","dateCreated":"2018-02-15T13:43:42+0000","dateStarted":"2018-02-19T14:00:32+0000","dateFinished":"2018-02-19T14:00:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15984","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Create rdds</h4>\n</div>"}]}},{"text":"%spark2.pyspark\ndata_file = \"/tmp/kddcup.data.gz\"\nraw_data = sc.textFile(data_file)\n\nprint \"Train data size is {}\".format(raw_data.count())","user":"klinnoinen","dateUpdated":"2018-02-15T13:43:26+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518702091046_1716492629","id":"20180215-134131_504452418","dateCreated":"2018-02-15T13:41:31+0000","dateStarted":"2018-02-15T13:43:26+0000","dateFinished":"2018-02-15T13:43:40+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15985"},{"text":"%spark2.pyspark\ntest_data_file = \"/tmp/corrected.gz\"\ntest_raw_data = sc.textFile(test_data_file)\n\nprint \"Test data size is {}\".format(test_raw_data.count())","user":"klinnoinen","dateUpdated":"2018-02-15T13:43:30+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518702181247_-691560436","id":"20180215-134301_1656067823","dateCreated":"2018-02-15T13:43:01+0000","dateStarted":"2018-02-15T13:43:30+0000","dateFinished":"2018-02-15T13:43:41+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15986"},{"title":"Prepare data","text":"%spark2.pyspark\n\nfrom pyspark.mllib.regression import LabeledPoint\nfrom numpy import array\n\ncsv_data = raw_data.map(lambda x: x.split(\",\"))\ntest_csv_data = test_raw_data.map(lambda x: x.split(\",\"))\n\nprotocols = csv_data.map(lambda x: x[1]).distinct().collect()\nservices = csv_data.map(lambda x: x[2]).distinct().collect()\nflags = csv_data.map(lambda x: x[3]).distinct().collect()\n","user":"klinnoinen","dateUpdated":"2018-02-15T14:18:23+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518702210447_-2107005667","id":"20180215-134330_1177605718","dateCreated":"2018-02-15T13:43:30+0000","dateStarted":"2018-02-15T14:17:01+0000","dateFinished":"2018-02-15T14:18:27+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15987"},{"text":"%spark2.pyspark\ndef create_labeled_point(line_split):\n    # leave_out = [41]\n    clean_line_split = line_split[0:41]\n    \n    # convert protocol to numeric categorical variable\n    try: \n        clean_line_split[1] = protocols.index(clean_line_split[1])\n    except:\n        clean_line_split[1] = len(protocols)\n        \n    # convert service to numeric categorical variable\n    try:\n        clean_line_split[2] = services.index(clean_line_split[2])\n    except:\n        clean_line_split[2] = len(services)\n    \n    # convert flag to numeric categorical variable\n    try:\n        clean_line_split[3] = flags.index(clean_line_split[3])\n    except:\n        clean_line_split[3] = len(flags)\n    \n    # convert label to binary label\n    attack = 1.0\n    if line_split[41]=='normal.':\n        attack = 0.0\n        \n    return LabeledPoint(attack, array([float(x) for x in clean_line_split]))\n\ntraining_data = csv_data.map(create_labeled_point)\ntest_data = test_csv_data.map(create_labeled_point)","user":"klinnoinen","dateUpdated":"2018-02-15T14:18:50+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518704131788_-762934384","id":"20180215-141531_559939500","dateCreated":"2018-02-15T14:15:31+0000","dateStarted":"2018-02-15T14:18:50+0000","dateFinished":"2018-02-15T14:18:50+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15988"},{"title":"Train classifier","text":"%spark2.pyspark\nfrom pyspark.mllib.tree import DecisionTree, DecisionTreeModel\nfrom time import time\n\n# Build the model\nt0 = time()\ntree_model = DecisionTree.trainClassifier(training_data, numClasses=2, \n                                          categoricalFeaturesInfo={1: len(protocols), 2: len(services), 3: len(flags)},\n                                          impurity='gini', maxDepth=4, maxBins=100)\ntt = time() - t0\n\nprint \"Classifier trained in {} seconds\".format(round(tt,3))","user":"klinnoinen","dateUpdated":"2018-02-15T14:18:53+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518704204040_-618144560","id":"20180215-141644_896035899","dateCreated":"2018-02-15T14:16:44+0000","dateStarted":"2018-02-15T14:18:54+0000","dateFinished":"2018-02-15T14:22:01+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15989"},{"title":"Evaluate model","text":"%spark2.pyspark\npredictions = tree_model.predict(test_data.map(lambda p: p.features))\nlabels_and_preds = test_data.map(lambda p: p.label).zip(predictions)\n","user":"klinnoinen","dateUpdated":"2018-02-15T14:22:21+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518704333960_1480058114","id":"20180215-141853_1726790567","dateCreated":"2018-02-15T14:18:53+0000","dateStarted":"2018-02-15T14:22:21+0000","dateFinished":"2018-02-15T14:22:21+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15990"},{"text":"%spark2.pyspark\nt0 = time()\ntest_accuracy = labels_and_preds.filter(lambda (v, p): v == p).count() / float(test_data.count())\ntt = time() - t0\n\nprint \"Prediction made in {} seconds. Test accuracy is {}\".format(round(tt,3), round(test_accuracy,4))\n","user":"klinnoinen","dateUpdated":"2018-02-15T14:22:24+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518704356634_-117388671","id":"20180215-141916_2007874145","dateCreated":"2018-02-15T14:19:16+0000","dateStarted":"2018-02-15T14:22:24+0000","dateFinished":"2018-02-15T14:22:42+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15991"},{"title":"Interpret the model","text":"%spark2.pyspark\nprint \"Learned classification tree model:\"\nprint tree_model.toDebugString()\n","user":"klinnoinen","dateUpdated":"2018-02-15T14:22:49+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518704544233_1912990927","id":"20180215-142224_369920864","dateCreated":"2018-02-15T14:22:24+0000","dateStarted":"2018-02-15T14:22:49+0000","dateFinished":"2018-02-15T14:22:49+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15992"},{"text":"%spark2.pyspark\nprint \"Service 0 is {}\".format(services[0])\nprint \"Service 52 is {}\".format(services[52])\n","user":"klinnoinen","dateUpdated":"2018-02-15T14:22:52+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518704569114_845343377","id":"20180215-142249_836961702","dateCreated":"2018-02-15T14:22:49+0000","dateStarted":"2018-02-15T14:22:53+0000","dateFinished":"2018-02-15T14:22:53+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15993"},{"text":"%md\n### Build minimal model using 3 main splits","user":"klinnoinen","dateUpdated":"2018-02-19T14:00:36+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518704572830_-1628992123","id":"20180215-142252_1724096286","dateCreated":"2018-02-15T14:22:52+0000","dateStarted":"2018-02-19T14:00:36+0000","dateFinished":"2018-02-19T14:00:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15994","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Build minimal model using 3 main splits</h3>\n</div>"}]}},{"text":"%spark2.pyspark\ndef create_labeled_point_minimal(line_split):\n    # leave_out = [41]\n    clean_line_split = line_split[3:4] + line_split[5:6] + line_split[22:23]\n    \n    # convert flag to numeric categorical variable\n    try:\n        clean_line_split[0] = flags.index(clean_line_split[0])\n    except:\n        clean_line_split[0] = len(flags)\n    \n    # convert label to binary label\n    attack = 1.0\n    if line_split[41]=='normal.':\n        attack = 0.0\n        \n    return LabeledPoint(attack, array([float(x) for x in clean_line_split]))\n\ntraining_data_minimal = csv_data.map(create_labeled_point_minimal)\ntest_data_minimal = test_csv_data.map(create_labeled_point_minimal)\n","user":"klinnoinen","dateUpdated":"2018-02-15T14:23:53+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518704608087_344662465","id":"20180215-142328_1205070448","dateCreated":"2018-02-15T14:23:28+0000","dateStarted":"2018-02-15T14:23:53+0000","dateFinished":"2018-02-15T14:23:53+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15995"},{"text":"%spark2.pyspark\n# Build the model\nt0 = time()\ntree_model_minimal = DecisionTree.trainClassifier(training_data_minimal, numClasses=2, \n                                          categoricalFeaturesInfo={0: len(flags)},\n                                          impurity='gini', maxDepth=3, maxBins=32)\ntt = time() - t0\n\nprint \"Classifier trained in {} seconds\".format(round(tt,3))","user":"klinnoinen","dateUpdated":"2018-02-15T14:24:05+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518704633336_-682971199","id":"20180215-142353_2013419720","dateCreated":"2018-02-15T14:23:53+0000","dateStarted":"2018-02-15T14:24:05+0000","dateFinished":"2018-02-15T14:25:38+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15996"},{"title":"Predict on data and calculate accuracy","text":"%spark2.pyspark\npredictions_minimal = tree_model_minimal.predict(test_data_minimal.map(lambda p: p.features))\nlabels_and_preds_minimal = test_data_minimal.map(lambda p: p.label).zip(predictions_minimal)","user":"klinnoinen","dateUpdated":"2018-02-15T14:26:09+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518704645157_1907943219","id":"20180215-142405_392048480","dateCreated":"2018-02-15T14:24:05+0000","dateStarted":"2018-02-15T14:26:10+0000","dateFinished":"2018-02-15T14:26:10+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15997"},{"text":"%spark2.pyspark\nt0 = time()\ntest_accuracy = labels_and_preds_minimal.filter(lambda (v, p): v == p).count() / float(test_data_minimal.count())\ntt = time() - t0\n\nprint \"Prediction made in {} seconds. Test accuracy is {}\".format(round(tt,3), round(test_accuracy,4))","user":"klinnoinen","dateUpdated":"2018-02-15T14:26:12+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518704672211_864350960","id":"20180215-142432_1775257777","dateCreated":"2018-02-15T14:24:32+0000","dateStarted":"2018-02-15T14:26:12+0000","dateFinished":"2018-02-15T14:26:22+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15998"},{"text":"%spark2.pyspark\n","user":"klinnoinen","dateUpdated":"2018-02-15T14:26:12+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518704772103_-764706532","id":"20180215-142612_1832190457","dateCreated":"2018-02-15T14:26:12+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15999"}],"name":"/Development/MLlib 2","id":"2D6CWFN1Z","angularObjects":{"2C8A4SZ9T_livy2:shared_process":[],"2D65U3YVP:klinnoinen:":[],"2D8CEQZQG:shared_process":[],"2D8GMAMUB:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2D5W64A4H:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}