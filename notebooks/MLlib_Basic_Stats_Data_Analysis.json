{"paragraphs":[{"text":"%md\n# MLlib: Basic Statistics and Exploratory Data Analysis","user":"klinnoinen","dateUpdated":"2018-02-19T14:01:49+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705175315_-994464043","id":"20180215-143255_386972092","dateCreated":"2018-02-15T14:32:55+0000","dateStarted":"2018-02-19T14:01:49+0000","dateFinished":"2018-02-19T14:01:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18792","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>MLlib: Basic Statistics and Exploratory Data Analysis</h1>\n</div>"}]}},{"text":"%spark2.pyspark\nimport urllib\nf = urllib.urlretrieve (\"http://kdd.ics.uci.edu/databases/kddcup99/kddcup.data_10_percent.gz\", \"/tmp/kddcup.data_10_percent.gz\")","user":"klinnoinen","dateUpdated":"2018-02-15T14:33:46+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705199010_174265198","id":"20180215-143319_95245758","dateCreated":"2018-02-15T14:33:19+0000","dateStarted":"2018-02-15T14:33:46+0000","dateFinished":"2018-02-15T14:33:50+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18793"},{"text":"%spark2.pyspark\ndata_file = \"/tmp/kddcup.data_10_percent.gz\"\nraw_data = sc.textFile(data_file)","user":"klinnoinen","dateUpdated":"2018-02-15T14:34:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705183871_-1298199491","id":"20180215-143303_2073011974","dateCreated":"2018-02-15T14:33:03+0000","dateStarted":"2018-02-15T14:34:01+0000","dateFinished":"2018-02-15T14:34:02+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18794"},{"text":"%sh\nhdfs dfs -put /tmp/kddcup.data_10_percent.gz /tmp","user":"klinnoinen","dateUpdated":"2018-02-15T14:35:17+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false},"editorMode":"ace/mode/sh"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705283341_-265194666","id":"20180215-143443_826631246","dateCreated":"2018-02-15T14:34:43+0000","dateStarted":"2018-02-15T14:35:17+0000","dateFinished":"2018-02-15T14:35:20+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18795"},{"text":"%spark2.pyspark\nimport numpy as np\n\ndef parse_interaction(line):\n    line_split = line.split(\",\")\n    # keep just numeric and logical values\n    symbolic_indexes = [1,2,3,41]\n    clean_line_split = [item for i,item in enumerate(line_split) if i not in symbolic_indexes]\n    return np.array([float(x) for x in clean_line_split])\n\nvector_data = raw_data.map(parse_interaction)\n","user":"klinnoinen","dateUpdated":"2018-02-15T14:35:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705232291_1830270437","id":"20180215-143352_1182087629","dateCreated":"2018-02-15T14:33:52+0000","dateStarted":"2018-02-15T14:35:22+0000","dateFinished":"2018-02-15T14:35:22+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18796"},{"text":"%spark2.pyspark\nfrom pyspark.mllib.stat import Statistics \nfrom math import sqrt \n\n# Compute column summary statistics.\nsummary = Statistics.colStats(vector_data)\n\nprint \"Duration Statistics:\"\nprint \" Mean: {}\".format(round(summary.mean()[0],3))\nprint \" St. deviation: {}\".format(round(sqrt(summary.variance()[0]),3))\nprint \" Max value: {}\".format(round(summary.max()[0],3))\nprint \" Min value: {}\".format(round(summary.min()[0],3))\nprint \" Total value count: {}\".format(summary.count())\nprint \" Number of non-zero values: {}\".format(summary.numNonzeros()[0])","user":"klinnoinen","dateUpdated":"2018-02-15T14:35:24+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705255743_-1374841143","id":"20180215-143415_688244028","dateCreated":"2018-02-15T14:34:15+0000","dateStarted":"2018-02-15T14:35:24+0000","dateFinished":"2018-02-15T14:35:39+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18797"},{"text":"%spark2.pyspark\ndef parse_interaction_with_key(line):\n    line_split = line.split(\",\")\n    # keep just numeric and logical values\n    symbolic_indexes = [1,2,3,41]\n    clean_line_split = [item for i,item in enumerate(line_split) if i not in symbolic_indexes]\n    return (line_split[41], np.array([float(x) for x in clean_line_split]))\n\nlabel_vector_data = raw_data.map(parse_interaction_with_key)","user":"klinnoinen","dateUpdated":"2018-02-15T14:36:25+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705264345_-489518599","id":"20180215-143424_956381091","dateCreated":"2018-02-15T14:34:24+0000","dateStarted":"2018-02-15T14:36:26+0000","dateFinished":"2018-02-15T14:36:26+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18798"},{"text":"%spark2.pyspark\nnormal_label_data = label_vector_data.filter(lambda x: x[0]==\"normal.\")\n","user":"klinnoinen","dateUpdated":"2018-02-15T14:36:32+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705385909_-1894870058","id":"20180215-143625_908106184","dateCreated":"2018-02-15T14:36:25+0000","dateStarted":"2018-02-15T14:36:32+0000","dateFinished":"2018-02-15T14:36:32+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18799"},{"text":"%spark2.pyspark\nnormal_summary = Statistics.colStats(normal_label_data.values())\n","user":"klinnoinen","dateUpdated":"2018-02-15T14:36:38+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705392150_137758381","id":"20180215-143632_249997376","dateCreated":"2018-02-15T14:36:32+0000","dateStarted":"2018-02-15T14:36:38+0000","dateFinished":"2018-02-15T14:36:51+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18800"},{"text":"%spark2.pyspark\nprint \"Duration Statistics for label: {}\".format(\"normal\")\nprint \" Mean: {}\".format(normal_summary.mean()[0],3)\nprint \" St. deviation: {}\".format(round(sqrt(normal_summary.variance()[0]),3))\nprint \" Max value: {}\".format(round(normal_summary.max()[0],3))\nprint \" Min value: {}\".format(round(normal_summary.min()[0],3))\nprint \" Total value count: {}\".format(normal_summary.count())\nprint \" Number of non-zero values: {}\".format(normal_summary.numNonzeros()[0])","user":"klinnoinen","dateUpdated":"2018-02-15T14:36:53+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705398470_511364887","id":"20180215-143638_1036414393","dateCreated":"2018-02-15T14:36:38+0000","dateStarted":"2018-02-15T14:36:53+0000","dateFinished":"2018-02-15T14:36:53+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18801"},{"text":"%spark2.pyspark\ndef summary_by_label(raw_data, label):\n    label_vector_data = raw_data.map(parse_interaction_with_key).filter(lambda x: x[0]==label)\n    return Statistics.colStats(label_vector_data.values())","user":"klinnoinen","dateUpdated":"2018-02-15T14:37:04+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705413867_1601389169","id":"20180215-143653_58642991","dateCreated":"2018-02-15T14:36:53+0000","dateStarted":"2018-02-15T14:37:04+0000","dateFinished":"2018-02-15T14:37:04+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18802"},{"text":"%spark2.pyspark\nnormal_sum = summary_by_label(raw_data, \"normal.\")\n\nprint \"Duration Statistics for label: {}\".format(\"normal\")\nprint \" Mean: {}\".format(normal_sum.mean()[0],3)\nprint \" St. deviation: {}\".format(round(sqrt(normal_sum.variance()[0]),3))\nprint \" Max value: {}\".format(round(normal_sum.max()[0],3))\nprint \" Min value: {}\".format(round(normal_sum.min()[0],3))\nprint \" Total value count: {}\".format(normal_sum.count())\nprint \" Number of non-zero values: {}\".format(normal_sum.numNonzeros()[0])","user":"klinnoinen","dateUpdated":"2018-02-15T14:37:12+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705424475_585652073","id":"20180215-143704_1786560741","dateCreated":"2018-02-15T14:37:04+0000","dateStarted":"2018-02-15T14:37:12+0000","dateFinished":"2018-02-15T14:37:25+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18803"},{"text":"%spark2.pyspark\nguess_passwd_summary = summary_by_label(raw_data, \"guess_passwd.\")\n\nprint \"Duration Statistics for label: {}\".format(\"guess_password\")\nprint \" Mean: {}\".format(guess_passwd_summary.mean()[0],3)\nprint \" St. deviation: {}\".format(round(sqrt(guess_passwd_summary.variance()[0]),3))\nprint \" Max value: {}\".format(round(guess_passwd_summary.max()[0],3))\nprint \" Min value: {}\".format(round(guess_passwd_summary.min()[0],3))\nprint \" Total value count: {}\".format(guess_passwd_summary.count())\nprint \" Number of non-zero values: {}\".format(guess_passwd_summary.numNonzeros()[0])","user":"klinnoinen","dateUpdated":"2018-02-15T14:37:31+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705432548_480246199","id":"20180215-143712_1535241354","dateCreated":"2018-02-15T14:37:12+0000","dateStarted":"2018-02-15T14:37:31+0000","dateFinished":"2018-02-15T14:37:43+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18804"},{"text":"%spark2.pyspark\nlabel_list = [\"back.\",\"buffer_overflow.\",\"ftp_write.\",\"guess_passwd.\",\n              \"imap.\",\"ipsweep.\",\"land.\",\"loadmodule.\",\"multihop.\",\n              \"neptune.\",\"nmap.\",\"normal.\",\"perl.\",\"phf.\",\"pod.\",\"portsweep.\",\n              \"rootkit.\",\"satan.\",\"smurf.\",\"spy.\",\"teardrop.\",\"warezclient.\",\n              \"warezmaster.\"]\n              ","user":"klinnoinen","dateUpdated":"2018-02-15T14:37:45+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705451168_1742469422","id":"20180215-143731_1229989753","dateCreated":"2018-02-15T14:37:31+0000","dateStarted":"2018-02-15T14:37:45+0000","dateFinished":"2018-02-15T14:37:45+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18805"},{"text":"%spark2.pyspark\nstats_by_label = [(label, summary_by_label(raw_data, label)) for label in label_list]\n","user":"klinnoinen","dateUpdated":"2018-02-15T14:37:49+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705465864_717498352","id":"20180215-143745_1478680970","dateCreated":"2018-02-15T14:37:45+0000","dateStarted":"2018-02-15T14:37:49+0000","dateFinished":"2018-02-15T14:42:39+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18806"},{"text":"%spark2.pyspark\nduration_by_label = [ \n    (stat[0], np.array([float(stat[1].mean()[0]), float(sqrt(stat[1].variance()[0])), float(stat[1].min()[0]), float(stat[1].max()[0]), int(stat[1].count())])) \n    for stat in stats_by_label]","user":"klinnoinen","dateUpdated":"2018-02-15T14:42:59+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705469165_-886889237","id":"20180215-143749_1501702827","dateCreated":"2018-02-15T14:37:49+0000","dateStarted":"2018-02-15T14:42:59+0000","dateFinished":"2018-02-15T14:43:00+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18807"},{"text":"%spark2.pyspark\nimport pandas as pd\npd.set_option('display.max_columns', 50)\n\nstats_by_label_df = pd.DataFrame.from_items(duration_by_label, columns=[\"Mean\", \"Std Dev\", \"Min\", \"Max\", \"Count\"], orient='index')","user":"klinnoinen","dateUpdated":"2018-02-15T14:43:02+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705484919_1557066425","id":"20180215-143804_1852273891","dateCreated":"2018-02-15T14:38:04+0000","dateStarted":"2018-02-15T14:43:02+0000","dateFinished":"2018-02-15T14:43:02+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18808"},{"text":"%spark2.pyspark\nprint \"Duration statistics, by label\"\nstats_by_label_df\n","user":"klinnoinen","dateUpdated":"2018-02-15T14:43:07+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705498859_1007644996","id":"20180215-143818_520451927","dateCreated":"2018-02-15T14:38:18+0000","dateStarted":"2018-02-15T14:43:07+0000","dateFinished":"2018-02-15T14:43:07+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18809"},{"text":"%spark2.pyspark\ndef get_variable_stats_df(stats_by_label, column_i):\n    column_stats_by_label = [\n        (stat[0], np.array([float(stat[1].mean()[column_i]), float(sqrt(stat[1].variance()[column_i])), float(stat[1].min()[column_i]), float(stat[1].max()[column_i]), int(stat[1].count())])) \n        for stat in stats_by_label\n    ]\n    return pd.DataFrame.from_items(column_stats_by_label, columns=[\"Mean\", \"Std Dev\", \"Min\", \"Max\", \"Count\"], orient='index')","user":"klinnoinen","dateUpdated":"2018-02-15T14:45:29+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705513576_1149464098","id":"20180215-143833_566354331","dateCreated":"2018-02-15T14:38:33+0000","dateStarted":"2018-02-15T14:45:29+0000","dateFinished":"2018-02-15T14:45:29+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18810"},{"text":"%spark2.pyspark\nget_variable_stats_df(stats_by_label,0)\n","user":"klinnoinen","dateUpdated":"2018-02-15T14:45:32+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705520669_-1567247886","id":"20180215-143840_376840506","dateCreated":"2018-02-15T14:38:40+0000","dateStarted":"2018-02-15T14:45:32+0000","dateFinished":"2018-02-15T14:45:33+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18811"},{"text":"%spark2.pyspark\nprint \"src_bytes statistics, by label\"\nget_variable_stats_df(stats_by_label,1)","user":"klinnoinen","dateUpdated":"2018-02-15T14:45:42+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705533763_-980859913","id":"20180215-143853_1923489057","dateCreated":"2018-02-15T14:38:53+0000","dateStarted":"2018-02-15T14:45:42+0000","dateFinished":"2018-02-15T14:45:42+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18812"},{"text":"%spark2.pyspark\nfrom pyspark.mllib.stat import Statistics \ncorrelation_matrix = Statistics.corr(vector_data, method=\"spearman\")","user":"klinnoinen","dateUpdated":"2018-02-15T14:45:51+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705532123_-3228282","id":"20180215-143852_2115104154","dateCreated":"2018-02-15T14:38:52+0000","dateStarted":"2018-02-15T14:45:51+0000","dateFinished":"2018-02-15T14:48:49+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18813"},{"text":"%spark2.pyspark\nimport pandas as pd\npd.set_option('display.max_columns', 50)\n\ncol_names = [\"duration\",\"src_bytes\",\"dst_bytes\",\"land\",\"wrong_fragment\",\n             \"urgent\",\"hot\",\"num_failed_logins\",\"logged_in\",\"num_compromised\",\n             \"root_shell\",\"su_attempted\",\"num_root\",\"num_file_creations\",\n             \"num_shells\",\"num_access_files\",\"num_outbound_cmds\",\n             \"is_hot_login\",\"is_guest_login\",\"count\",\"srv_count\",\"serror_rate\",\n             \"srv_serror_rate\",\"rerror_rate\",\"srv_rerror_rate\",\"same_srv_rate\",\n             \"diff_srv_rate\",\"srv_diff_host_rate\",\"dst_host_count\",\"dst_host_srv_count\",\n             \"dst_host_same_srv_rate\",\"dst_host_diff_srv_rate\",\"dst_host_same_src_port_rate\",\n             \"dst_host_srv_diff_host_rate\",\"dst_host_serror_rate\",\"dst_host_srv_serror_rate\",\n             \"dst_host_rerror_rate\",\"dst_host_srv_rerror_rate\"]\n\ncorr_df = pd.DataFrame(correlation_matrix, index=col_names, columns=col_names)\n\ncorr_df","user":"klinnoinen","dateUpdated":"2018-02-15T14:50:13+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705531115_372286644","id":"20180215-143851_468471214","dateCreated":"2018-02-15T14:38:51+0000","dateStarted":"2018-02-15T14:50:13+0000","dateFinished":"2018-02-15T14:50:13+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18814"},{"text":"%spark2.pyspark\n# get a boolean dataframe where true means that a pair of variables is highly correlated\nhighly_correlated_df = (abs(corr_df) > .8) & (corr_df < 1.0)\n# get the names of the variables so we can use them to slice the dataframe\ncorrelated_vars_index = (highly_correlated_df==True).any()\ncorrelated_var_names = correlated_vars_index[correlated_vars_index==True].index\n# slice it\nhighly_correlated_df.loc[correlated_var_names,correlated_var_names]","user":"klinnoinen","dateUpdated":"2018-02-15T14:50:16+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705531026_418841261","id":"20180215-143851_1038451941","dateCreated":"2018-02-15T14:38:51+0000","dateStarted":"2018-02-15T14:50:16+0000","dateFinished":"2018-02-15T14:50:16+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18815"},{"text":"%spark2.pyspark\n","user":"klinnoinen","dateUpdated":"2018-02-15T14:38:40+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518705520572_1484595714","id":"20180215-143840_1283586541","dateCreated":"2018-02-15T14:38:40+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:18816"}],"name":"/Development/MLlib 3","id":"2D7ZWPF64","angularObjects":{"2C8A4SZ9T_livy2:shared_process":[],"2D65U3YVP:klinnoinen:":[],"2D8CEQZQG:shared_process":[],"2D8GMAMUB:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2D5W64A4H:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}