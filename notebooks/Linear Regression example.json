{"paragraphs":[{"text":"%md\nThis notebook is an example of using the mllib python libraries' Linear Regression model.\nThe example datafile is downloaded from Git. Depending on the setup the notebook is run on, you can also upload the file to HDFS and read it from there.\nThe SparkContext sc.textFile() is used to read and map the data.\n\nVisualization of the data is created in Angular, and will update automatically as the data is processed.","user":"anonymous","dateUpdated":"2017-10-23T09:23:50+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1508750344148_1770984979","id":"20171023-091904_909013034","dateCreated":"2017-10-23T09:19:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4161","dateFinished":"2017-10-23T09:23:48+0000","dateStarted":"2017-10-23T09:23:48+0000","title":"Abstract","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>This notebook is an example of using the mllib python libraries&rsquo; Linear Regression model.<br/>The example datafile is downloaded from Git. Depending on the setup the notebook is run on, you can also upload the file to HDFS and read it from there.<br/>The SparkContext sc.textFile() is used to read and map the data.</p>\n<p>Visualization of the data is created in Angular, and will update automatically as the data is processed.</p>\n</div>"}]}},{"title":"Fetch example data","text":"%sh\ncd /tmp\nwget https://raw.githubusercontent.com/linnoinen/stuff/master/datasets/linear-regression-example-data.txt","user":"anonymous","dateUpdated":"2017-10-23T09:19:02+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false},"editorMode":"ace/mode/sh","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1508744117635_-153079087","id":"20171023-073517_1947360654","dateCreated":"2017-10-23T07:35:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3888","dateFinished":"2017-10-23T09:09:08+0000","dateStarted":"2017-10-23T09:09:07+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"--2017-10-23 09:09:08--  https://raw.githubusercontent.com/linnoinen/stuff/master/datasets/linear-regression-example-data.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.112.133\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.112.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1359 (1.3K) [text/plain]\nSaving to: ‘linear-regression-example-data.txt’\n\n     0K .                                                     100%  254M=0s\n\n2017-10-23 09:09:08 (254 MB/s) - ‘linear-regression-example-data.txt’ saved [1359/1359]\n\n"}]}},{"title":"Move to HDFS","text":"%sh\nhdfs dfs -put /tmp/linear-regression-example-data.txt /tmp/","user":"anonymous","dateUpdated":"2017-10-23T09:19:14+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false},"editorMode":"ace/mode/sh","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1508744204343_-2123054752","id":"20171023-073644_1013846586","dateCreated":"2017-10-23T07:36:44+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:3889"},{"title":"Load the data","text":"%pyspark\n\ndata = sc.textFile(\"/tmp/linear-regression-example-data.txt\").map(lambda row: row.split(','))\nfullSet = data.map(lambda line: (float(line[0]), float(line[1]))).collect()","dateUpdated":"2017-10-23T09:09:12+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":[],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1508744111058_1956899205","id":"20170620-114044_643257264","dateCreated":"2017-10-23T07:35:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3890","user":"anonymous","dateFinished":"2017-10-23T09:09:30+0000","dateStarted":"2017-10-23T09:09:12+0000"},{"title":"Push all data into variable","text":"%pyspark\nimport time\n\ndef ClearAll():\n    global totalDataVisual\n    global trainingDataVisual\n    global testingDataVisual\n    global predictedDataVisual\n    totalDataVisual =[]\n    trainingDataVisual = []\n    testingDataVisual = []\n    predictedDataVisual = []\n    z.z.angularBind(\"totalData\", totalDataVisual)\n    z.z.angularBind(\"trainingData\", trainingDataVisual)\n    z.z.angularBind(\"testingData\", testingDataVisual)\n    z.z.angularBind(\"predictedData\", predictedDataVisual)\n\nClearAll()\nfor i in fullSet:\n    totalDataVisual.append(i)\n    z.z.angularBind(\"totalData\", totalDataVisual)\n    time.sleep(0.05)","dateUpdated":"2017-10-23T09:15:03+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":[],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1508744111063_1954975461","id":"20170710-102632_1767981307","dateCreated":"2017-10-23T07:35:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3891","user":"anonymous","dateFinished":"2017-10-23T09:15:12+0000","dateStarted":"2017-10-23T09:15:03+0000"},{"title":"Perform prediction using Linear Regression","text":"%pyspark\nfrom pyspark.mllib.regression import LinearRegressionWithSGD\nfrom pyspark.mllib.classification import SVMWithSGD, SVMModel\nfrom pyspark.mllib.regression import LabeledPoint\nfrom pyspark.mllib.feature import StandardScaler\n\n# Load and parse the data\ndef parsePoint(line):\n    values = [float(x) for x in line.split(',')]\n    return LabeledPoint(values[0], values[1:])\n\nClearAll()\n\ndataFullInverse = data.map(lambda line: LabeledPoint(float(line[1]),map(float, line[0:1])))\n\ntrainingData, testingData = dataFullInverse.randomSplit([.7,.3],seed=1234)\n\nz.z.angularBind(\"trainingData\", trainingData.map(lambda line: (line.features[0],line.label)).collect())\n\nlinearModel = LinearRegressionWithSGD.train(trainingData, 200,.2)\n\nz.z.angularBind(\"testingData\", testingDataVisual)\nz.z.angularBind(\"predictedData\", predictedDataVisual)\n\nfor i in testingData.map(lambda line: (line.features[0],line.label)).collect():\n    params = []\n    params.append(i[0])\n    result = linearModel.predict(params)\n    predictedDataVisual.append((result, i[1]))\n    testingDataVisual.append((i[0], i[1]))\n    z.z.angularBind(\"predictedData\", testingDataVisual)\n    z.z.angularBind(\"testingData\", predictedDataVisual)\n    time.sleep(1)\n","dateUpdated":"2017-10-23T09:15:16+0000","config":{"tableHide":false,"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"title":true,"results":[],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"/zeppelin/interpreter/spark/pyspark/pyspark.zip/pyspark/mllib/regression.py:281: UserWarning: Deprecated in 2.0.0. Use ml.regression.LinearRegression.\n"}]},"apps":[],"jobName":"paragraph_1508744111065_1952666967","id":"20170710-111740_391299502","dateCreated":"2017-10-23T07:35:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3892","user":"anonymous","dateFinished":"2017-10-23T09:15:44+0000","dateStarted":"2017-10-23T09:15:16+0000"},{"title":"Visualize output","text":"%angular\n<style>\n.chart {\n\n}\n\n.main text {\n    font: 10px sans-serif;\t\n}\n\n.axis line, .axis path {\n    shape-rendering: crispEdges;\n    stroke: black;\n    fill: none;\n}\n\n</style>\n\n<div id=\"container\" vars=\"totalData,testingData,trainingData,predictedData\" style='margin:100px'>\n    <svg class=\"chart\"></svg>\n</div>\n\n {{data}}\n\n<script>\n\nfunction host(element){\n       \n    var varNames = element.attr('vars').split(',');\n    \n    window.angularVars = {};\n  \n    var scope = angular.element(element.parent('.ng-scope')).scope().compiledScope;\n   \n    $.each(varNames, function(i, v){\n        window[v+'-watcher'] = scope.$watch(v, function(newVal, oldVal){\n            window.angularVars[v] = newVal;\n            drawData();\n        });\n    });\n}\n\nfunction drawData() {\n    var totalData = window.angularVars.totalData;\n    var trainingData = window.angularVars.trainingData;\n    var testingData = window.angularVars.testingData;\n    var predictedData = window.angularVars.predictedData;\n    var total = totalData.concat(trainingData).concat(testingData).concat(predictedData);\n\n    var margin = {top: 20, right: 25, bottom: 20, left: 25}\n      , width = 960 - margin.left - margin.right\n      , height = 500 - margin.top - margin.bottom;\n    \n    var x = d3.scale.linear()\n              .domain([0, d3.max(total, function(d) { return d[0]; })])\n              .range([ 0, width ]);\n    \n    var y = d3.scale.linear()\n    \t      .domain([0, d3.max(total, function(d) { return d[1]; })])\n    \t      .range([ height, 0 ]);\n    \t      \n    d3.selectAll(\"svg > *\").remove();\n \n    var chart = d3.select('.chart')\n\t.attr('width', width + margin.right + margin.left)\n\t.attr('height', height + margin.top + margin.bottom)\n\t.attr('class', 'chart')\n\n    var main = chart.append('g')\n\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\t.attr('width', width)\n\t.attr('height', height)\n\t.attr('class', 'main')   \n        \n    // draw the x axis\n    var xAxis = d3.svg.axis().scale(x).orient('bottom');\n\n    main.append('g')\n\t.attr('transform', 'translate(0,' + height + ')')\n\t.attr('class', 'main axis date')\n\t.call(xAxis);\n\n    // draw the y axis\n    var yAxis = d3.svg.axis().scale(y).orient('left');\n\n    main.append('g')\n\t.attr('transform', 'translate(0,0)')\n\t.attr('class', 'main axis date')\n\t.call(yAxis);\n\n    var g = main.append(\"svg:g\"); \n    \n    g.selectAll(\"scatter-dots\")\n      .data(totalData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"blue\");\n    \n    g.selectAll(\"scatter-dots\")\n      .data(testingData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"red\");\n    \n    g.selectAll(\"scatter-dots\")\n      .data(trainingData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"blue\");\n    \n    g.selectAll(\"scatter-dots\")\n      .data(predictedData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"green\");\n  \n}\n\nif (window.d3) {\n    host($('#container'));\n} else {\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.16/d3.min.js';\n    sc.onload = function() { host($('#container')); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>","dateUpdated":"2017-10-23T07:35:11+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<style>\n.chart {\n\n}\n\n.main text {\n    font: 10px sans-serif;\t\n}\n\n.axis line, .axis path {\n    shape-rendering: crispEdges;\n    stroke: black;\n    fill: none;\n}\n\n</style>\n\n<div id=\"container\" vars=\"totalData,testingData,trainingData,predictedData\" style='margin:100px'>\n    <svg class=\"chart\"></svg>\n</div>\n\n {{data}}\n\n<script>\n\nfunction host(element){\n       \n    var varNames = element.attr('vars').split(',');\n    \n    window.angularVars = {};\n  \n    var scope = angular.element(element.parent('.ng-scope')).scope().compiledScope;\n   \n    $.each(varNames, function(i, v){\n        window[v+'-watcher'] = scope.$watch(v, function(newVal, oldVal){\n            window.angularVars[v] = newVal;\n            drawData();\n        });\n    });\n}\n\nfunction drawData() {\n    var totalData = window.angularVars.totalData;\n    var trainingData = window.angularVars.trainingData;\n    var testingData = window.angularVars.testingData;\n    var predictedData = window.angularVars.predictedData;\n    var total = totalData.concat(trainingData).concat(testingData).concat(predictedData);\n\n    var margin = {top: 20, right: 25, bottom: 20, left: 25}\n      , width = 960 - margin.left - margin.right\n      , height = 500 - margin.top - margin.bottom;\n    \n    var x = d3.scale.linear()\n              .domain([0, d3.max(total, function(d) { return d[0]; })])\n              .range([ 0, width ]);\n    \n    var y = d3.scale.linear()\n    \t      .domain([0, d3.max(total, function(d) { return d[1]; })])\n    \t      .range([ height, 0 ]);\n    \t      \n    d3.selectAll(\"svg > *\").remove();\n \n    var chart = d3.select('.chart')\n\t.attr('width', width + margin.right + margin.left)\n\t.attr('height', height + margin.top + margin.bottom)\n\t.attr('class', 'chart')\n\n    var main = chart.append('g')\n\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\t.attr('width', width)\n\t.attr('height', height)\n\t.attr('class', 'main')   \n        \n    // draw the x axis\n    var xAxis = d3.svg.axis().scale(x).orient('bottom');\n\n    main.append('g')\n\t.attr('transform', 'translate(0,' + height + ')')\n\t.attr('class', 'main axis date')\n\t.call(xAxis);\n\n    // draw the y axis\n    var yAxis = d3.svg.axis().scale(y).orient('left');\n\n    main.append('g')\n\t.attr('transform', 'translate(0,0)')\n\t.attr('class', 'main axis date')\n\t.call(yAxis);\n\n    var g = main.append(\"svg:g\"); \n    \n    g.selectAll(\"scatter-dots\")\n      .data(totalData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"blue\");\n    \n    g.selectAll(\"scatter-dots\")\n      .data(testingData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"red\");\n    \n    g.selectAll(\"scatter-dots\")\n      .data(trainingData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"blue\");\n    \n    g.selectAll(\"scatter-dots\")\n      .data(predictedData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"green\");\n  \n}\n\nif (window.d3) {\n    host($('#container'));\n} else {\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.16/d3.min.js';\n    sc.onload = function() { host($('#container')); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>"}]},"apps":[],"jobName":"paragraph_1508744111066_1953821214","id":"20170628-101106_1079913897","dateCreated":"2017-10-23T07:35:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3893"},{"dateUpdated":"2017-10-23T07:35:11+0000","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1508744111070_1952282218","id":"20170707-130211_1035497333","dateCreated":"2017-10-23T07:35:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3894"}],"name":"Linear Regression","id":"2CVGYQ68W","angularObjects":{"2CXMJ42W6:shared_process":[],"2CX3S8E84:shared_process":[],"2CWHGFNDW:shared_process":[],"2CYKT8XXP:shared_process":[],"2CW7T5ZYX:shared_process":[],"2CW5KZG8V:shared_process":[],"2CV616TUW:shared_process":[],"2CVZEE5G1:shared_process":[],"2CYASVB3N:shared_process":[],"2CYSQ2G1E:shared_process":[],"2CY7GUXX7:shared_process":[],"2CYZMRKRG:shared_process":[],"2CWDRRBMP:shared_process":[],"2CVNHZQW6:shared_process":[],"2CX4F83EE:shared_process":[],"2CY4ATKM3:shared_process":[],"2CVS1YFW7:shared_process":[],"2CW96BPZQ:shared_process":[],"2CW6M3SHC:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}